<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[ActiveBlogger]]></title>
  <link href="http://JoeJohnRobert.github.io/atom.xml" rel="self"/>
  <link href="http://JoeJohnRobert.github.io/"/>
  <updated>2015-01-07T13:17:00-05:00</updated>
  <id>http://JoeJohnRobert.github.io/</id>
  <author>
    <name><![CDATA[Joe Cardarelli]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Decent Exposure]]></title>
    <link href="http://JoeJohnRobert.github.io/blog/2015/01/07/getting-started-with-decent-exposure/"/>
    <updated>2015-01-07T10:22:05-05:00</updated>
    <id>http://JoeJohnRobert.github.io/blog/2015/01/07/getting-started-with-decent-exposure</id>
    <content type="html"><![CDATA[<h3>A quick guide for getting started with decent_exposure</h3>

<p><img class="center" src="http://JoeJohnRobert.github.io/images/decent_exposure.png" width="350" height="350" title="image" alt="images"></p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Recently, I&rsquo;ve been exploring working with the decent_exposure gem. With decent_exposure you can clean up your controllers and better encapsulate your code. Instead of setting instance variables in each action of your controller, decent_exposure sets up methods in your controller which you can directly call in your view, thereby decreasing repetition.</p>

<h5>First steps</h5>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; The first thing you are going to do is add <code>gem 'decent_exposure'</code> to your gemfile and then of course <code>bundle</code>.</p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; For the purposes of getting to know decent_exposure, I put together a simple application where musicians or <code>axe_masters</code> can keep track of their many <code>guitars</code>. <code>Guitars</code> are nested as a resource under <code>axe_masters</code>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Rails</span><span class="o">.</span><span class="n">application</span><span class="o">.</span><span class="n">routes</span><span class="o">.</span><span class="n">draw</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">root</span> <span class="s1">&#39;axe_masters#index&#39;</span>
</span><span class='line'>  <span class="n">resources</span> <span class="ss">:axe_masters</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">resources</span> <span class="ss">:guitars</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h5>Controller setup</h5>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; When you first look at a controller which has adopted the decent_exposure way, your first thought might be how little code there actually is. There are no instance variables to define and there is very little going on in each action. You set up some methods for your views using with a call to the <code>expose</code> method provided to you by the gem. Then you set up some redirecting for the <code>create</code>, <code>update</code> and <code>destroy</code> actions and that&rsquo;s about it.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">GuitarsController</span> <span class="o">&lt;</span> <span class="no">ApplicationController</span>
</span><span class='line'>  <span class="n">expose</span><span class="p">(</span><span class="ss">:axe_master</span><span class="p">)</span>
</span><span class='line'>  <span class="n">expose</span><span class="p">(</span><span class="ss">:guitar</span><span class="p">,</span> <span class="ss">attributes</span><span class="p">:</span> <span class="ss">:guitar_params</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">create</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">guitar</span><span class="o">.</span><span class="n">save</span>
</span><span class='line'>      <span class="n">redirect_to</span> <span class="n">axe_master</span><span class="p">,</span> <span class="ss">notice</span><span class="p">:</span> <span class="s2">&quot;Axe saved!&quot;</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>      <span class="n">render</span> <span class="ss">:new</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">update</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">guitar</span><span class="o">.</span><span class="n">save</span>
</span><span class='line'>      <span class="n">redirect_to</span> <span class="n">axe_master</span><span class="p">,</span> <span class="ss">notice</span><span class="p">:</span> <span class="s2">&quot;Axe updated!&quot;</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>      <span class="n">render</span> <span class="ss">:show</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">destroy</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">guitar</span><span class="o">.</span><span class="n">destroy</span>
</span><span class='line'>      <span class="n">redirect_to</span> <span class="n">axe_master</span><span class="p">,</span> <span class="ss">notice</span><span class="p">:</span> <span class="s2">&quot;Axe deleted!&quot;</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>      <span class="n">redirect_to</span> <span class="n">axe_master</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="kp">private</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">guitar_params</span>
</span><span class='line'>      <span class="n">params</span><span class="o">.</span><span class="n">require</span><span class="p">(</span><span class="ss">:guitar</span><span class="p">)</span><span class="o">.</span><span class="n">permit</span><span class="p">(</span><span class="ss">:make</span><span class="p">,</span> <span class="ss">:model</span><span class="p">,</span> <span class="ss">:color</span><span class="p">,</span> <span class="ss">:axe_master_id</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; As you can see above, rather than defining <code>@axe_master</code> and <code>@guitar</code> instance variables in each action, you call <code>expose</code> and pass the object you&rsquo;d like to reference. Magic, right? Nope, you guessed it; decent_exposure relies on a few conventions. Straight from the documentation, the conventions are as follows. With the <code>guitar</code> object in mind:</p>

<p><strong>1. There is an object named <code>Guitar</code>.</strong></p>

<p><strong>2. <code>Guitar</code> has a <code>.find</code> method that takes an id.</strong></p>

<p><strong>3. There is a params method that returns a Hash-like structure which has either an id key or a guitar_id key.</strong></p>

<p>You will also see, that there is no need to define index, new or show actions. Normally, you would just set these up with instance variables, but using the <code>expose</code> method, decent_exposure serves them up for you. You might be wondering, how does decent_exposure decide whether <code>guitar</code> should be a new instance or one that&rsquo;s already persisted? If there is an <code>id</code> key in params, like on a <code>show</code> page, decent_exposure will try to find the <code>guitar</code> with that <code>id</code>. Othewise, it will create a new instance, like in a form in the <code>new</code> template. If you wanted to search by something other than the <code>id</code>, you can set a value to the <code>finder_parameter</code> as so:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">expose</span><span class="p">(</span><span class="ss">:guitar</span><span class="p">,</span> <span class="ss">finder_parameter</span><span class="p">:</span> <span class="ss">:guitar_id</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<h5>Use with strong_parameters</h5>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Another layer of implicitness that I that was pretty cool, is the fact that you don&rsquo;t even have to build out your create or update actions. Normally you would do something like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="k">def</span> <span class="nf">create</span>
</span><span class='line'>    <span class="vi">@axe_master</span> <span class="o">=</span> <span class="no">AxeMaster</span><span class="o">.</span><span class="n">find</span><span class="p">(</span><span class="n">params</span><span class="o">[</span><span class="ss">:axe_master_id</span><span class="o">]</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@axe_master</span><span class="o">.</span><span class="n">guitars</span><span class="o">.</span><span class="n">build</span><span class="p">(</span><span class="n">guitar_params</span><span class="p">)</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">guitar</span><span class="o">.</span><span class="n">save</span>
</span><span class='line'>      <span class="n">redirect_to</span> <span class="n">axe_master</span><span class="p">,</span> <span class="ss">notice</span><span class="p">:</span> <span class="s2">&quot;Axe saved!&quot;</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>      <span class="n">render</span> <span class="ss">:new</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>
With decent_exposure, finding the <code>axe_master</code> in question and building a a <code>guitar</code> from the object all happens implicitly. In order to use strong_parameters, however, there are two bits of code you must add. First, when you <code>expose</code> the <code>guitar</code> object, you have declare the name of your params method that decent_exposure will look for:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">expose</span><span class="p">(</span><span class="ss">:guitar</span><span class="p">,</span> <span class="ss">attributes</span><span class="p">:</span> <span class="ss">:guitar_params</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Second, as of Rails 4, you need to add the following three lines to your <code>application_controller.rb</code> file.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">decent_configuration</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">strategy</span> <span class="no">DecentExposure</span><span class="o">::</span><span class="no">StrongParametersStrategy</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>With this in place you are all set to use strong_params.</p>

<h5>Views</h5>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Now that our controller is good to go, let&rsquo;s take a look at the views. Just as you guessed, we can call the methods we set up with <code>expose</code> in our views rather than using instance variables. First, we have our template for creating or updating a <code>guitar</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='erb'><span class='line'><span class="cp">&lt;%=</span> <span class="n">form_for</span> <span class="o">[</span><span class="n">axe_master</span><span class="p">,</span> <span class="n">guitar</span><span class="o">]</span> <span class="k">do</span> <span class="o">|</span><span class="n">f</span><span class="o">|</span> <span class="cp">%&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">  &lt;p&gt;</span>
</span><span class='line'><span class="x">    </span><span class="cp">&lt;%=</span> <span class="n">f</span><span class="o">.</span><span class="n">label</span> <span class="ss">:make</span> <span class="cp">%&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">    </span><span class="cp">&lt;%=</span> <span class="n">f</span><span class="o">.</span><span class="n">text_field</span> <span class="ss">:make</span> <span class="cp">%&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">  &lt;/p&gt;</span>
</span><span class='line'><span class="x">  &lt;p&gt;</span>
</span><span class='line'><span class="x">    </span><span class="cp">&lt;%=</span> <span class="n">f</span><span class="o">.</span><span class="n">label</span> <span class="ss">:model</span> <span class="cp">%&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">    </span><span class="cp">&lt;%=</span> <span class="n">f</span><span class="o">.</span><span class="n">text_field</span> <span class="ss">:model</span> <span class="cp">%&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">  &lt;/p&gt;</span>
</span><span class='line'><span class="x">  &lt;p&gt;</span>
</span><span class='line'><span class="x">    </span><span class="cp">&lt;%=</span> <span class="n">f</span><span class="o">.</span><span class="n">label</span> <span class="ss">:color</span> <span class="cp">%&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">    </span><span class="cp">&lt;%=</span> <span class="n">f</span><span class="o">.</span><span class="n">text_field</span> <span class="ss">:color</span> <span class="cp">%&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">  &lt;/p&gt;</span>
</span><span class='line'><span class="x">  </span><span class="cp">&lt;%=</span> <span class="n">f</span><span class="o">.</span><span class="n">hidden_field</span> <span class="ss">:axe_master_id</span><span class="p">,</span> <span class="ss">value</span><span class="p">:</span> <span class="n">axe_master</span><span class="o">.</span><span class="n">id</span> <span class="cp">%&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">  &lt;p&gt; </span><span class="cp">&lt;%=</span> <span class="n">f</span><span class="o">.</span><span class="n">submit</span> <span class="s1">&#39;Submit!&#39;</span> <span class="cp">%&gt;</span><span class="x"> &lt;/p&gt;</span>
</span><span class='line'><span class="cp">&lt;%</span> <span class="k">end</span> <span class="cp">%&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>Next, we have our simple <code>axe_master</code> show page:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='erb'><span class='line'><span class="cp">&lt;%=</span> <span class="n">link_to</span> <span class="s2">&quot;New Axe&quot;</span><span class="p">,</span> <span class="n">new_axe_master_guitar_path</span><span class="p">(</span><span class="n">axe_master</span><span class="p">)</span> <span class="cp">%&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">&lt;h1&gt; </span><span class="cp">&lt;%=</span> <span class="n">axe_master</span><span class="o">.</span><span class="n">name</span> <span class="cp">%&gt;</span><span class="x">&#39;s Page &lt;/h1&gt; </span>
</span><span class='line'><span class="x">&lt;h3&gt; Guitars &lt;/h3&gt;</span>
</span><span class='line'><span class="x">  &lt;ul&gt; </span>
</span><span class='line'><span class="x">    </span><span class="cp">&lt;%</span> <span class="n">guitars</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">axe</span><span class="o">|</span> <span class="cp">%&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">    &lt;li&gt; </span>
</span><span class='line'><span class="x">      </span><span class="cp">&lt;%=</span> <span class="n">axe</span><span class="o">.</span><span class="n">make</span> <span class="cp">%&gt;</span><span class="x"> - </span><span class="cp">&lt;%=</span> <span class="n">axe</span><span class="o">.</span><span class="n">model</span> <span class="cp">%&gt;</span><span class="x">, </span><span class="cp">&lt;%=</span> <span class="n">axe</span><span class="o">.</span><span class="n">color</span> <span class="cp">%&gt;</span><span class="x"> </span>
</span><span class='line'><span class="x">      </span><span class="cp">&lt;%=</span> <span class="n">link_to</span> <span class="s2">&quot;Edit&quot;</span><span class="p">,</span> <span class="n">axe_master_guitar_path</span><span class="p">(</span><span class="n">axe_master</span><span class="p">,</span> <span class="n">axe</span><span class="p">)</span> <span class="cp">%&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">      </span><span class="cp">&lt;%=</span> <span class="n">link_to</span> <span class="s2">&quot;Delete&quot;</span><span class="p">,</span> <span class="n">axe_master_guitar_path</span><span class="p">(</span><span class="n">axe_master</span><span class="p">,</span> <span class="n">axe</span><span class="p">),</span> <span class="ss">:method</span> <span class="o">=&gt;</span> <span class="ss">:delete</span><span class="p">,</span> <span class="ss">:confirm</span> <span class="o">=&gt;</span> <span class="s2">&quot;Are you sure?&quot;</span> <span class="cp">%&gt;</span><span class="x">  </span>
</span><span class='line'><span class="x">    &lt;/li&gt;</span>
</span><span class='line'><span class="x">    </span><span class="cp">&lt;%</span> <span class="k">end</span> <span class="cp">%&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">  &lt;/ul&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>As you can see, we reference the <code>axe_master</code>, <code>guitar</code> and <code>guitars</code> methods rather than using any instance variables. In creating the <code>guitars</code> method with <code>expose</code>, decent_exposure allows you to customize how you would like to define a collection of objects by supplying a block. Let&rsquo;s say you only wanted Fender guitars:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">expose</span><span class="p">(</span><span class="ss">:guitars</span><span class="p">)</span> <span class="p">{</span> <span class="no">Guitar</span><span class="o">.</span><span class="n">where</span><span class="p">(</span><span class="ss">make</span><span class="p">:</span> <span class="s1">&#39;Fender&#39;</span><span class="p">)</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>In using the <code>guitars</code> method on the <code>axe_master</code> show page, I assumed you would have to at least explicitly define that you wanted <code>guitars</code> to only include those objects that belong to the <code>axe_master</code> whose page you are on by doing something like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">expose</span><span class="p">(</span><span class="ss">:guitars</span><span class="p">)</span> <span class="p">{</span> <span class="n">axe_master</span><span class="o">.</span><span class="n">guitars</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>Exposing just the <code>guitars</code> method is enough, however. The rest is implicit. Pretty cool.</p>

<h5>Customize and conquer</h5>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Hopefully, this simple guide is enough to help you understand decent_exposure and get it up and running yourself. As mentioned before, decent_exposure relies a lot on convention, but there are many more ways to customize its use that aren&rsquo;t mentioned here. Head over to the <a href="https://github.com/hashrocket/decent_exposure">documentation</a> to read up on these.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[jQuery Data Attributes]]></title>
    <link href="http://JoeJohnRobert.github.io/blog/2014/12/09/jquery-data-attributes/"/>
    <updated>2014-12-09T09:29:25-05:00</updated>
    <id>http://JoeJohnRobert.github.io/blog/2014/12/09/jquery-data-attributes</id>
    <content type="html"><![CDATA[<h3>Ever need some Ruby in your JS?</h3>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Yesterday, I was implementing a Google map in a Rails project. I needed to pass coordinates from a controller to a Google maps script. This is where jQuery data attributes come in. You can&rsquo;t just throw an ERB tag in a script, but you can assign embedded ruby to a data attribute.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'> <span class="nt">&lt;h1</span> <span class="na">class=</span><span class="s">&#39;big-text&#39;</span> <span class="na">data-latitude=</span><span class="s">&#39;&lt;%= @user.latitude %&gt;&#39;</span> <span class="na">data-longitude=</span><span class="s">&#39;&lt;%= @user.longitude %&gt;&#39;</span><span class="nt">&gt;&lt;/h1&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Now, I can assign my data attributes to a JS variable for use in the Google maps script.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">lat</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="s2">&quot;h1.big-text&quot;</span><span class="p">).</span><span class="nx">data</span><span class="p">(</span><span class="s1">&#39;latitude&#39;</span><span class="p">)</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">lng</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="s2">&quot;h1.big-text&quot;</span><span class="p">).</span><span class="nx">data</span><span class="p">(</span><span class="s1">&#39;longitude&#39;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Deploying to Heroku]]></title>
    <link href="http://JoeJohnRobert.github.io/blog/2014/11/18/deploying-to-heroku/"/>
    <updated>2014-11-18T18:20:41-05:00</updated>
    <id>http://JoeJohnRobert.github.io/blog/2014/11/18/deploying-to-heroku</id>
    <content type="html"><![CDATA[<h3>Six Steps</h3>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; So, you&rsquo;ve built your app and now want to get it live for all the world to see. Heroku is a great option for this. While Heroku has some very in-depth documentation, I constantly find myself looking up the steps again and again. With this post, I will detail the six steps you need to follow to quickly deploy a basic app to Heroku, while hiding any sensitive information such as personal keys used to interact with an API.</p>

<p><strong>1. Create a free account</strong></p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; The first thing you are going to want to do is head over to <a href="https://signup.heroku.com/dc">https://signup.heroku.com/dc</a> and set up a free account.</p>

<p><strong>2. brew install heroku</strong></p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Next, install heroku. My favorite way to do this is on the command line via using Homebrew.</p>

<p><strong>3. heroku create</strong></p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Now, you&rsquo;re all set up to create your app. CD into the your app&rsquo;s directory and run <code>heroku create</code>. Heroku will create a url to your app with a ridiculous default name and url, usually about nature. This command will also set up a heroku remote to use with git.</p>

<p><strong>4. heroku config:set KEY=value</strong></p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; If you have any API keys or other sensitive data, Heroku provides you with convenient config variables to store and access this information. Let&rsquo;s say I have a super secret key. I can set the value by running <code>heroku config: set SUPER_SECRET_KEY=124kjh537b</code>. Then you can access this variable in your application as so, <code>ENV['SUPER_SECRET_KEY']</code>. Each time you set a new secret key for your application, Heroku will update and restart your app, in case you have already deployed at this point.</p>

<p><strong>5. PostgreSQL</strong></p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; In order to successfully push your Heroku app up to the web, you will need to use PostgreSQL as your production database, at the very least. You can do this by adding the following line to your gemfile: <code>gem 'pg', group: :production</code> and changing the <code>adapter</code> in your <code>config/database.yml</code> to <code>adapter: postgresql</code>. While using PostgreSQL as your production database, and SQLite as your development database is okay in the short term, it is recommended to use the same database in both the development and production environments in order to avoid headaches in the future.</p>

<p><strong>6. git push heroku master</strong></p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; You are now ready to push your newly created app up to Heroku. Commit your changes if you repo is not already up-to-date and run <code>git push heroku master</code> which will push to your heroku remote.</p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Your app is now up! Go check it out using the url Heroku provided to you in step 3. As I said before, these steps are for basic app deployment. Once you have a full-fledged Rails application, you will likely need t troubleshoot a little bit to get all of your styling to appear correctly. For this reason, I like to deploy early and often to make the debugging process and painless as possible.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Sample Method: Full Speed Ahead]]></title>
    <link href="http://JoeJohnRobert.github.io/blog/2014/10/23/the-sample-method-full-speed-ahead/"/>
    <updated>2014-10-23T17:45:37-04:00</updated>
    <id>http://JoeJohnRobert.github.io/blog/2014/10/23/the-sample-method-full-speed-ahead</id>
    <content type="html"><![CDATA[<h3>Sample: My new favorite method</h3>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Just yesterday, I found out about the <code>sample</code> method. Using the <code>sample</code> method will randomly select an element from the array of your choice.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">numbers</span> <span class="o">=</span> <span class="o">[</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">6</span><span class="p">,</span><span class="mi">7</span><span class="p">,</span><span class="mi">8</span><span class="p">,</span><span class="mi">9</span><span class="o">]</span>
</span><span class='line'><span class="n">numbers</span><span class="o">.</span><span class="n">sample</span>
</span><span class='line'> <span class="o">=&gt;</span> <span class="mi">5</span>
</span></code></pre></td></tr></table></div></figure>


<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; You can also pass <code>sample</code> an argument to return however many unique elements you would like.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">numbers</span> <span class="o">=</span> <span class="o">[</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">6</span><span class="p">,</span><span class="mi">7</span><span class="p">,</span><span class="mi">8</span><span class="p">,</span><span class="mi">9</span><span class="o">]</span>
</span><span class='line'><span class="n">numbers</span><span class="o">.</span><span class="n">sample</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span>
</span><span class='line'> <span class="o">=&gt;</span> <span class="o">[</span><span class="mi">7</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">3</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Prior to discovering the <code>sample</code> method, I accessed random elements using some other methods.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">numbers</span> <span class="o">=</span> <span class="o">[</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">6</span><span class="p">,</span><span class="mi">7</span><span class="p">,</span><span class="mi">8</span><span class="p">,</span><span class="mi">9</span><span class="o">]</span>
</span><span class='line'><span class="n">numbers</span><span class="o">.</span><span class="n">shuffle</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span>
</span><span class='line'> <span class="o">=&gt;</span> <span class="mi">7</span>
</span><span class='line'><span class="n">numbers</span><span class="o">[</span><span class="nb">rand</span><span class="p">(</span><span class="n">numbers</span><span class="o">.</span><span class="n">size</span><span class="p">)</span><span class="o">]</span>
</span><span class='line'> <span class="o">=&gt;</span> <span class="mi">9</span>
</span></code></pre></td></tr></table></div></figure>


<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Since these other methods also get the job done, I was curious as to what the upside of <code>sample</code> is. Aside from being much more elegant, IMHO, the <code>sample</code> method is also a lot faster. One can use Ruby&rsquo;s <code>Benchmark</code> module to test the speed of different lines of code.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;benchmark&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="n">numbers</span> <span class="o">=</span> <span class="p">(</span><span class="mi">1</span><span class="o">.</span><span class="n">.</span><span class="mi">5000000</span><span class="p">)</span><span class="o">.</span><span class="n">map</span> <span class="p">{</span> <span class="nb">rand</span> <span class="p">}</span>
</span><span class='line'><span class="no">Benchmark</span><span class="o">.</span><span class="n">bmbm</span> <span class="k">do</span> <span class="o">|</span><span class="n">x</span><span class="o">|</span>
</span><span class='line'>  <span class="n">x</span><span class="o">.</span><span class="n">report</span><span class="p">(</span><span class="s2">&quot;shuffle[0]&quot;</span><span class="p">)</span> <span class="p">{</span> <span class="n">numbers</span><span class="o">.</span><span class="n">shuffle</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span> <span class="p">}</span>
</span><span class='line'>  <span class="n">x</span><span class="o">.</span><span class="n">report</span><span class="p">(</span><span class="s2">&quot;[rand(numbers.size)]&quot;</span><span class="p">)</span> <span class="p">{</span> <span class="n">numbers</span><span class="o">[</span><span class="nb">rand</span><span class="p">(</span><span class="n">numbers</span><span class="o">.</span><span class="n">size</span><span class="p">)</span><span class="o">]</span>  <span class="p">}</span>
</span><span class='line'>  <span class="n">x</span><span class="o">.</span><span class="n">report</span><span class="p">(</span><span class="s2">&quot;sample&quot;</span><span class="p">)</span> <span class="p">{</span><span class="n">numbers</span><span class="o">.</span><span class="n">sample</span><span class="p">}</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; I know the excitement is hard to contain, but before we test the speed of our random selection methods, let&rsquo;s walk through the above speed test. First, I create an array of 5 milllion different floats using the <code>map</code> method. Calling <code>rand</code> in the block with no argument will give you floats. If I had supplied <code>rand</code> with an argument, let&rsquo;s say <code>2</code>, the map method would return an array of 5 million integers with the possible values of <code>0</code> or <code>1</code>. If we pass in <code>3</code> to <code>rand</code> instead, we would get an array with the possible values of <code>0</code>, <code>1</code>, or <code>2</code>. You get the picture.</p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Now on the the actual test. By using the <code>bmbm</code> method on Benchmark, you can test the speed of several lines of code at once. This is preferable to the similar <code>bm</code> method, because the order of tests may affect their speed, based on memory use and garbage collection. Another cool feature of the <code>Benchmark</code> module is that you can pass in a string argument to the <code>report</code> method, which will label each test for clarity. Now the moment we&rsquo;ve all been waiting for; let&rsquo;s see how fast this <code>sample</code> method actually is.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>                     <span class="n">user</span>     <span class="nb">system</span>      <span class="n">total</span>        <span class="n">real</span>
</span><span class='line'><span class="n">shuffle</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span>           <span class="mi">0</span><span class="o">.</span><span class="mi">290000</span>   <span class="mi">0</span><span class="o">.</span><span class="mo">000000</span>   <span class="mi">0</span><span class="o">.</span><span class="mi">290000</span> <span class="p">(</span>  <span class="mi">0</span><span class="o">.</span><span class="mi">296134</span><span class="p">)</span>
</span><span class='line'><span class="o">[</span><span class="nb">rand</span><span class="p">(</span><span class="n">numbers</span><span class="o">.</span><span class="n">size</span><span class="p">)</span><span class="o">]</span>   <span class="mi">0</span><span class="o">.</span><span class="mo">000000</span>   <span class="mi">0</span><span class="o">.</span><span class="mo">000000</span>   <span class="mi">0</span><span class="o">.</span><span class="mo">000000</span> <span class="p">(</span>  <span class="mi">0</span><span class="o">.</span><span class="mo">00000</span><span class="mi">8</span><span class="p">)</span>
</span><span class='line'><span class="n">sample</span>               <span class="mi">0</span><span class="o">.</span><span class="mo">000000</span>   <span class="mi">0</span><span class="o">.</span><span class="mo">000000</span>   <span class="mi">0</span><span class="o">.</span><span class="mo">000000</span> <span class="p">(</span>  <span class="mi">0</span><span class="o">.</span><span class="mo">000005</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Looking at the <code>real</code> column above, which shows the elapsed time in seconds, we can see that the <code>sample</code> method is almost twice as fast as using <code>[rand(numbers.size)]</code> and a whole lot faster (I&rsquo;ll leave the actual math up to you) than shuffling the array and taking the first element.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Getters and Setters]]></title>
    <link href="http://JoeJohnRobert.github.io/blog/2014/10/09/getters-and-setters/"/>
    <updated>2014-10-09T08:51:53-04:00</updated>
    <id>http://JoeJohnRobert.github.io/blog/2014/10/09/getters-and-setters</id>
    <content type="html"><![CDATA[<h3>It all makes sense now&hellip;</h3>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;When creating a class in Ruby, one must use getters and setters in order to read and write to various instance variables of a class instance. For the longest time I didn&rsquo;t fully understand these getters and setters. I understood that <code>attr_reader</code> was used to read instance variables, <code>attr_writer</code> was used to write to instance variables and <code>attr_accessor</code> was used to both get and set instance variables. Beyond knowing the differences between the three, I didn&rsquo;t comprehend what was going on under the hood. I figured Ruby auto-magically allowed for reading and writing and I just had to accept it.</p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Let&rsquo;s say we have a class called <code>Guitar</code> and we wanted to read and write to the instance variable of <code>@brand</code>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Guitar</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">sweet_axe</span> <span class="o">=</span> <span class="no">Guitar</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'> <span class="o">=&gt;</span> <span class="c1">#&lt;Guitar:0x007f9aaa250ac0&gt;</span>
</span><span class='line'><span class="n">sweet_axe</span><span class="o">.</span><span class="n">brand</span>
</span><span class='line'> <span class="o">=&gt;</span><span class="ss">NoMethodError</span><span class="p">:</span> <span class="n">undefined</span> <span class="nb">method</span> <span class="s1">&#39;brand&#39;</span> <span class="c1">#&lt;Guitar:0x007f9aaa250ac0&gt;</span>
</span><span class='line'><span class="n">sweet_axe</span><span class="o">.</span><span class="n">brand</span> <span class="o">=</span> <span class="s2">&quot;Fender&quot;</span>
</span><span class='line'> <span class="o">=&gt;</span><span class="ss">NoMethodError</span><span class="p">:</span> <span class="n">undefined</span> <span class="nb">method</span> <span class="s1">&#39;brand=&#39;</span> <span class="k">for</span> <span class="c1">#&lt;Guitar:0x007f9aaa250ac0&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;As you can see above, we get a NoMethodError without a getter and setter present. When I dug a little deeper, trying to understand various Stack Overflow posts, I realized that <code>attr_reader</code> and <code>attr_writer</code> were basically just aliases for the following Ruby methods.</p>

<h4>attr_reader :brand</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">brand</span>
</span><span class='line'>  <span class="vi">@brand</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h4>attr_writer :brand</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">brand</span><span class="o">=</span><span class="p">(</span><span class="n">str</span><span class="p">)</span>
</span><span class='line'>  <span class="vi">@brand</span> <span class="o">=</span> <span class="n">str</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Simple enough, right? Wasn&rsquo;t for me. As soon as I saw the <code>def method=(str)</code> syntax, I panicked. &ldquo;What the h3ll is that?&rdquo; I thought. Is that an argument with a default value? Almost looks like it, but not quite. I assumed it was some crazy Ruby syntax I had never seen before. I simply didn&rsquo;t understand. It all finally clicked when I learned <strong>the <code>=</code> sign is just part of the method name.</strong> It&rsquo;s that easy. The <code>=</code> sign is nothing special. All you are doing is passing in an argument to the method and setting the instance variable to it.</p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;With this understanding I can now make as many instances of the guitar class as I want, give them a brand and build some other cool methods using that brand method. Let&rsquo;s see how this works, using an <code>attr_accessor</code> instead of an <code>attr_reader</code> and <code>attr_writer</code> or the <code>brand</code> and <code>brand=</code> methods.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Guitar</span>
</span><span class='line'><span class="kp">attr_accessor</span> <span class="ss">:brand</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">strum_that_guitar</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="s2">&quot;Now strumming my new </span><span class="si">#{</span><span class="n">brand</span><span class="si">}</span><span class="s2">!&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">sweet_axe</span> <span class="o">=</span> <span class="no">Guitar</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'> <span class="o">=&gt;</span> <span class="c1">#&lt;Guitar:0x007f9aaa250ac0&gt;</span>
</span><span class='line'><span class="n">sweet_axe</span><span class="o">.</span><span class="n">brand</span> <span class="o">=</span> <span class="s2">&quot;Fender&quot;</span>
</span><span class='line'> <span class="o">=&gt;</span> <span class="s2">&quot;Fender&quot;</span>
</span><span class='line'><span class="n">sweet_axe</span><span class="o">.</span><span class="n">brand</span>
</span><span class='line'> <span class="o">=&gt;</span> <span class="s2">&quot;Fender&quot;</span>
</span><span class='line'><span class="n">sweet_axe</span><span class="o">.</span><span class="n">strum_that_guitar</span>
</span><span class='line'><span class="no">Now</span> <span class="n">strumming</span> <span class="n">my</span> <span class="kp">new</span> <span class="no">Fender</span><span class="o">!</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
</feed>
